!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AMP_DC_OFFSET	TGC_monitor.ino	/^const int AMP_DC_OFFSET[] = {516, 514, 514, 517}; \/\/TODO calibrate myself$/;"	v
AMP_MULTI	TGC_monitor.ino	/^const float AMP_MULTI[] = {(5.0\/1024.0*(1\/0.0152)),(5.0\/1024.0*(1\/0.0152))\/ 3.0,(5.0\/1024.0*(1\/0.0152))\/ 3.0,(5.0\/1024.0*(1\/0.0152))\/ 3.0}; $/;"	v
AMP_PIN	TGC_monitor.ino	/^const byte AMP_PIN[] = {A8, A9, A10, A11}; \/\/ Pin A8 == 62$/;"	v
BOX_TEMP_ADDR	TGC_monitor.ino	/^DeviceAddress BOX_TEMP_ADDR = {0x28, 0xFF, 0x31, 0xAB, 0x31, 0x17, 0x03, 0x29};$/;"	v
DEBUG	TGC_monitor.ino	28;"	d	file:
ENERGY_INTERVAL	TGC_monitor.ino	/^const int ENERGY_INTERVAL = 500;$/;"	v
ENERGY_LEVEL	TGC_monitor.ino	/^unsigned int ENERGY_LEVEL = 0;$/;"	v
ENERGY_TIME_ELAPSED	TGC_monitor.ino	/^elapsedMillis ENERGY_TIME_ELAPSED;$/;"	v
FALSE	TGC_monitor.ino	37;"	d	file:
GPSSerial	TGC_monitor.ino	21;"	d	file:
GPS_SLEEP_FLAG	TGC_monitor.ino	/^bool GPS_SLEEP_FLAG = 1;$/;"	v
GPS_SYNC_INTERVAL	TGC_monitor.ino	/^const unsigned int GPS_SYNC_INTERVAL = 60*3; \/\/ How frequenty to update time with GPS$/;"	v
GPSdateTime	Time.ino	/^int GPSdateTime(int &year, byte &month, byte &day, byte &hour, byte &minute, byte &second){$/;"	f
IN_TEMP_ADDR	TGC_monitor.ino	/^DeviceAddress IN_TEMP_ADDR  = {0x28, 0xFF, 0x06, 0xB2, 0x02, 0x17, 0x04, 0xEE};$/;"	v
ISR	TGC_monitor.ino	/^ISR(WDT_vect){$/;"	f
LAST_GPS_FIX	TGC_monitor.ino	/^unsigned long LAST_GPS_FIX = 0; \/\/ UNIX time of last GPS fix$/;"	v
LOAD_DETECT_PIN	TGC_monitor.ino	/^const byte LOAD_DETECT_PIN = 0; \/\/ Pin 0$/;"	v
LOAD_INTERVAL	TGC_monitor.ino	/^const int LOAD_INTERVAL = 5000; \/\/milliseconds$/;"	v
LOAD_ON_FLAG	TGC_monitor.ino	/^bool LOAD_ON_FLAG = FALSE;$/;"	v
LOG	TGC_monitor.ino	/^File LOG;$/;"	v
NUM_AMP_SOURCES	TGC_monitor.ino	/^const byte NUM_AMP_SOURCES = 4; \/\/ number of current sources$/;"	v
NUM_NAPS_BETWEEN_SD_WRITES	TGC_monitor.ino	/^const int NUM_NAPS_BETWEEN_SD_WRITES = 2;$/;"	v
NUM_NAPS_TAKEN	TGC_monitor.ino	/^int NUM_NAPS_TAKEN = 0; \/\/ Number of naps taken during standby mode. One 'nap' is ~8sec long$/;"	v
NUM_VOLT_SOURCES	TGC_monitor.ino	/^const byte NUM_VOLT_SOURCES = 3; \/\/number of voltage sources$/;"	v
ONE_WIRE_BUS	TGC_monitor.ino	125;"	d	file:
OUT_TEMP_ADDR	TGC_monitor.ino	/^DeviceAddress OUT_TEMP_ADDR = {0x28, 0x1E, 0xBF, 0xDC, 0x06, 0x00, 0x00, 0xB4};$/;"	v
PREV_LOAD_STATE	TGC_monitor.ino	/^bool PREV_LOAD_STATE = FALSE;$/;"	v
REF_PWR_PIN	TGC_monitor.ino	/^const byte REF_PWR_PIN = 9; \/\/ LM4040 is powered from a pin so it can be powered down when not in use$/;"	v
REF_READ_PIN	TGC_monitor.ino	/^const byte REF_READ_PIN = A0;$/;"	v
RPiSerial	TGC_monitor.ino	22;"	d	file:
RTC_SYNC_INTERVAL	TGC_monitor.ino	/^const unsigned int RTC_SYNC_INTERVAL = 30; \/\/ How frequently to update time with RTC$/;"	v
SD_setup	SDcard.ino	/^void SD_setup(){$/;"	f
SDmasterSelect	TGC_monitor.ino	/^const byte SDmasterSelect = 48;$/;"	v
SYSTEM_HAULT	TGC_monitor.ino	/^void SYSTEM_HAULT(){$/;"	f
SYSTEM_TIME_ELAPSED	TGC_monitor.ino	/^elapsedMillis SYSTEM_TIME_ELAPSED;$/;"	v
TRUE	TGC_monitor.ino	38;"	d	file:
VOLT_CALIBRATION	TGC_monitor.ino	/^float VOLT_CALIBRATION = 5.0;$/;"	v
VOLT_MULTI	TGC_monitor.ino	/^const float VOLT_MULTI[] = {3.8764, 7.3357, 12.3537}; \/\/Voltage divider multiplier$/;"	v
VOLT_PIN	TGC_monitor.ino	/^const byte VOLT_PIN[] = {A12, A13, A14}; \/\/ Pin A12 == 66$/;"	v
WDT_FLAG	TGC_monitor.ino	/^byte WDT_FLAG = FALSE;$/;"	v
analog_setup	Analog_readings.ino	/^void analog_setup(){$/;"	f
areLoadsConnected	TGC_monitor.ino	/^void areLoadsConnected(){$/;"	f
chipSelect	TGC_monitor.ino	/^const byte chipSelect = 53;$/;"	v
debug_print	TGC_monitor.ino	30;"	d	file:
debug_print	TGC_monitor.ino	33;"	d	file:
debug_println	TGC_monitor.ino	31;"	d	file:
debug_println	TGC_monitor.ino	34;"	d	file:
energyUpdate	Analog_readings.ino	/^void energyUpdate(){$/;"	f
filename	TGC_monitor.ino	/^char *filename = (char *) malloc(15);$/;"	v
gps	TGC_monitor.ino	/^TinyGPS gps;$/;"	v
humanTime	Time.ino	/^void humanTime(){$/;"	f
loadConnected	TGC_monitor.ino	/^void loadConnected(){$/;"	f
loop	TGC_monitor.ino	/^void loop() {$/;"	f
newFile	SDcard.ino	/^void newFile(){$/;"	f
oneWire	TGC_monitor.ino	/^DallasTemperature sensors(&oneWire);$/;"	v
readAmps	Analog_readings.ino	/^void readAmps(float amps[]){$/;"	f
readReference	Analog_readings.ino	/^void readReference(){$/;"	f
readTemps	Analog_readings.ino	/^void readTemps(float temps[]){$/;"	f
readVoltages	Analog_readings.ino	/^void readVoltages(float volts[]){$/;"	f
rtc	TGC_monitor.ino	/^RTC_PCF8523 rtc;$/;"	v
setGPStime	Time.ino	/^time_t setGPStime(){$/;"	f
setRTCtime	Time.ino	/^time_t setRTCtime(){$/;"	f
setWrongTime	Time.ino	/^time_t setWrongTime(){$/;"	f
setup	TGC_monitor.ino	/^void setup() {$/;"	f
sleep	TGC_monitor.ino	/^void sleep(){  $/;"	f
standby	TGC_monitor.ino	/^void standby(){$/;"	f
strAmps	Analog_readings.ino	/^void strAmps(char Loadstr[], char Battstr[], char Solarstr[], char Hydrostr[]){$/;"	f
strTemps	Analog_readings.ino	/^void strTemps(char outTemp[], char inTemp[], char boxTemp[]){$/;"	f
strVoltages	Analog_readings.ino	/^void strVoltages(char Battstr[], char Solarstr[], char Hydrostr[]){$/;"	f
test	TGC_monitor.ino	/^void test(){$/;"	f
testVoltage	Analog_readings.ino	/^void testVoltage(){$/;"	f
time_setup	Time.ino	/^void time_setup(){$/;"	f
writeReadings	SDcard.ino	/^void writeReadings(){$/;"	f
